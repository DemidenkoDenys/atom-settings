(function() {
  var SpecHelper, SyncSettings, fs, os, path, run;

  SyncSettings = require('../lib/sync-settings');

  SpecHelper = require('./spec-helpers');

  run = SpecHelper.callAsync;

  fs = require('fs');

  path = require('path');

  os = require('os');

  describe("SyncSettings", function() {
    describe("low-level", function() {
      return describe("::fileContent", function() {
        var tmpPath;
        tmpPath = path.join(os.tmpdir(), 'atom-sync-settings.tmp');
        it("returns null for not existing file", function() {
          return expect(SyncSettings.fileContent(tmpPath)).toBeNull();
        });
        it("returns null for empty file", function() {
          fs.writeFileSync(tmpPath, "");
          try {
            return expect(SyncSettings.fileContent(tmpPath)).toBeNull();
          } finally {
            fs.unlinkSync(tmpPath);
          }
        });
        return it("returns content of existing file", function() {
          var text;
          text = "alabala portocala";
          fs.writeFileSync(tmpPath, text);
          try {
            return expect(SyncSettings.fileContent(tmpPath)).toEqual(text);
          } finally {
            fs.unlinkSync(tmpPath);
          }
        });
      });
    });
    return describe("high-level", function() {
      var GIST_ID_CONFIG, TOKEN_CONFIG;
      TOKEN_CONFIG = 'sync-settings.personalAccessToken';
      GIST_ID_CONFIG = 'sync-settings.gistId';
      window.resetTimeouts();
      SyncSettings.activate();
      window.advanceClock();
      beforeEach(function() {
        this.token = process.env.GITHUB_TOKEN || atom.config.get(TOKEN_CONFIG);
        atom.config.set(TOKEN_CONFIG, this.token);
        return run(function(cb) {
          var gistSettings;
          gistSettings = {
            "public": false,
            description: "Test gist by Sync Settings for Atom https://github.com/atom-community/sync-settings",
            files: {
              README: {
                content: '# Generated by Sync Settings for Atom https://github.com/atom-community/sync-settings'
              }
            }
          };
          return SyncSettings.createClient().gists.create(gistSettings, cb);
        }, (function(_this) {
          return function(err, res) {
            expect(err).toBeNull();
            _this.gistId = res.id;
            console.log("Using Gist " + _this.gistId);
            return atom.config.set(GIST_ID_CONFIG, _this.gistId);
          };
        })(this));
      });
      afterEach(function() {
        return run((function(_this) {
          return function(cb) {
            return SyncSettings.createClient().gists["delete"]({
              id: _this.gistId
            }, cb);
          };
        })(this), function(err, res) {
          return expect(err).toBeNull();
        });
      });
      describe("::backup", function() {
        it("back up the settings", function() {
          atom.config.set('sync-settings.syncSettings', true);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(res.files['settings.json']).toBeDefined();
            });
          });
        });
        it("don't back up the settings", function() {
          atom.config.set('sync-settings.syncSettings', false);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(res.files['settings.json']).not.toBeDefined();
            });
          });
        });
        it("back up the installed packages list", function() {
          atom.config.set('sync-settings.syncPackages', true);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(res.files['packages.json']).toBeDefined();
            });
          });
        });
        it("don't back up the installed packages list", function() {
          atom.config.set('sync-settings.syncPackages', false);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(res.files['packages.json']).not.toBeDefined();
            });
          });
        });
        it("back up the user keymaps", function() {
          atom.config.set('sync-settings.syncKeymap', true);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(res.files['keymap.cson']).toBeDefined();
            });
          });
        });
        it("don't back up the user keymaps", function() {
          atom.config.set('sync-settings.syncKeymap', false);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(res.files['keymap.cson']).not.toBeDefined();
            });
          });
        });
        it("back up the user styles", function() {
          atom.config.set('sync-settings.syncStyles', true);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(res.files['styles.less']).toBeDefined();
            });
          });
        });
        it("don't back up the user styles", function() {
          atom.config.set('sync-settings.syncStyles', false);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(res.files['styles.less']).not.toBeDefined();
            });
          });
        });
        it("back up the user init.coffee file", function() {
          atom.config.set('sync-settings.syncInit', true);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(res.files['init.coffee']).toBeDefined();
            });
          });
        });
        it("don't back up the user init.coffee file", function() {
          atom.config.set('sync-settings.syncInit', false);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(res.files['init.coffee']).not.toBeDefined();
            });
          });
        });
        it("back up the user snippets", function() {
          atom.config.set('sync-settings.syncSnippets', true);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(res.files['snippets.cson']).toBeDefined();
            });
          });
        });
        it("don't back up the user snippets", function() {
          atom.config.set('sync-settings.syncSnippets', false);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(res.files['snippets.cson']).not.toBeDefined();
            });
          });
        });
        it("back up the files defined in config.extraFiles", function() {
          atom.config.set('sync-settings.extraFiles', ['test.tmp', 'test2.tmp']);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              var file, i, len, ref, results;
              ref = atom.config.get('sync-settings.extraFiles');
              results = [];
              for (i = 0, len = ref.length; i < len; i++) {
                file = ref[i];
                results.push(expect(res.files[file]).toBeDefined());
              }
              return results;
            });
          });
        });
        return it("don't back up extra files defined in config.extraFiles", function() {
          atom.config.set('sync-settings.extraFiles', void 0);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run((function(_this) {
              return function(cb) {
                return SyncSettings.createClient().gists.get({
                  id: _this.gistId
                }, cb);
              };
            })(this), function(err, res) {
              return expect(Object.keys(res.files).length).toBe(1);
            });
          });
        });
      });
      describe("::restore", function() {
        it("updates settings", function() {
          atom.config.set('sync-settings.syncSettings', true);
          atom.config.set("some-dummy", true);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            atom.config.set("some-dummy", false);
            return run(function(cb) {
              return SyncSettings.restore(cb);
            }, function() {
              return expect(atom.config.get("some-dummy")).toBeTruthy();
            });
          });
        });
        it("doesn't updates settings", function() {
          atom.config.set('sync-settings.syncSettings', false);
          atom.config.set("some-dummy", true);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run(function(cb) {
              return SyncSettings.restore(cb);
            }, function() {
              return expect(atom.config.get("some-dummy")).toBeTruthy();
            });
          });
        });
        it("overrides keymap.cson", function() {
          var original, ref;
          atom.config.set('sync-settings.syncKeymap', true);
          original = (ref = SyncSettings.fileContent(atom.keymaps.getUserKeymapPath())) != null ? ref : "# keymap file (not found)";
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            fs.writeFileSync(atom.keymaps.getUserKeymapPath(), original + "\n# modified by sync setting spec");
            return run(function(cb) {
              return SyncSettings.restore(cb);
            }, function() {
              expect(SyncSettings.fileContent(atom.keymaps.getUserKeymapPath())).toEqual(original);
              return fs.writeFileSync(atom.keymaps.getUserKeymapPath(), original);
            });
          });
        });
        return it("restores all other files in the gist as well", function() {
          atom.config.set('sync-settings.extraFiles', ['test.tmp', 'test2.tmp']);
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return run(function(cb) {
              return SyncSettings.restore(cb);
            }, function() {
              var file, i, len, ref, results;
              ref = atom.config.get('sync-settings.extraFiles');
              results = [];
              for (i = 0, len = ref.length; i < len; i++) {
                file = ref[i];
                expect(fs.existsSync(atom.config.configDirPath + "/" + file)).toBe(true);
                expect(SyncSettings.fileContent(atom.config.configDirPath + "/" + file)).toBe("# " + file + " (not found) ");
                results.push(fs.unlink(atom.config.configDirPath + "/" + file));
              }
              return results;
            });
          });
        });
      });
      return describe("::check for update", function() {
        beforeEach(function() {
          return atom.config.unset('sync-settings._lastBackupHash');
        });
        it("updates last hash on backup", function() {
          return run(function(cb) {
            return SyncSettings.backup(cb);
          }, function() {
            return expect(atom.config.get("sync-settings._lastBackupHash")).toBeDefined();
          });
        });
        it("updates last hash on restore", function() {
          return run(function(cb) {
            return SyncSettings.restore(cb);
          }, function() {
            return expect(atom.config.get("sync-settings._lastBackupHash")).toBeDefined();
          });
        });
        return describe("::notification", function() {
          beforeEach(function() {
            return atom.notifications.clear();
          });
          it("displays on newer backup", function() {
            return run(function(cb) {
              return SyncSettings.checkForUpdate(cb);
            }, function() {
              expect(atom.notifications.getNotifications().length).toBe(1);
              return expect(atom.notifications.getNotifications()[0].getType()).toBe('warning');
            });
          });
          return it("ignores on up-to-date backup", function() {
            return run(function(cb) {
              return SyncSettings.backup(cb);
            }, function() {
              return run(function(cb) {
                atom.notifications.clear();
                return SyncSettings.checkForUpdate(cb);
              }, function() {
                expect(atom.notifications.getNotifications().length).toBe(1);
                return expect(atom.notifications.getNotifications()[0].getType()).toBe('success');
              });
            });
          });
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsZTovLy9DOi9Vc2Vycy9MZW55bW8vLmF0b20vcGFja2FnZXMvc3luYy1zZXR0aW5ncy9zcGVjL3N5bmMtc2V0dGluZ3Mtc3BlYy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBOztFQUFBLFlBQUEsR0FBZSxPQUFBLENBQVEsc0JBQVI7O0VBQ2YsVUFBQSxHQUFhLE9BQUEsQ0FBUSxnQkFBUjs7RUFDYixHQUFBLEdBQU0sVUFBVSxDQUFDOztFQUNqQixFQUFBLEdBQUssT0FBQSxDQUFRLElBQVI7O0VBQ0wsSUFBQSxHQUFPLE9BQUEsQ0FBUSxNQUFSOztFQUNQLEVBQUEsR0FBSyxPQUFBLENBQVEsSUFBUjs7RUFNTCxRQUFBLENBQVMsY0FBVCxFQUF5QixTQUFBO0lBRXZCLFFBQUEsQ0FBUyxXQUFULEVBQXNCLFNBQUE7YUFDcEIsUUFBQSxDQUFTLGVBQVQsRUFBMEIsU0FBQTtBQUN4QixZQUFBO1FBQUEsT0FBQSxHQUFVLElBQUksQ0FBQyxJQUFMLENBQVUsRUFBRSxDQUFDLE1BQUgsQ0FBQSxDQUFWLEVBQXVCLHdCQUF2QjtRQUVWLEVBQUEsQ0FBRyxvQ0FBSCxFQUF5QyxTQUFBO2lCQUN2QyxNQUFBLENBQU8sWUFBWSxDQUFDLFdBQWIsQ0FBeUIsT0FBekIsQ0FBUCxDQUF5QyxDQUFDLFFBQTFDLENBQUE7UUFEdUMsQ0FBekM7UUFHQSxFQUFBLENBQUcsNkJBQUgsRUFBa0MsU0FBQTtVQUNoQyxFQUFFLENBQUMsYUFBSCxDQUFpQixPQUFqQixFQUEwQixFQUExQjtBQUNBO21CQUNFLE1BQUEsQ0FBTyxZQUFZLENBQUMsV0FBYixDQUF5QixPQUF6QixDQUFQLENBQXlDLENBQUMsUUFBMUMsQ0FBQSxFQURGO1dBQUE7WUFHRSxFQUFFLENBQUMsVUFBSCxDQUFjLE9BQWQsRUFIRjs7UUFGZ0MsQ0FBbEM7ZUFPQSxFQUFBLENBQUcsa0NBQUgsRUFBdUMsU0FBQTtBQUNy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QUFZLENBQUMsY0FBYixDQUE0QixFQUE1QjtjQUZFLENBQUosRUFHRSxTQUFBO2dCQUNBLE1BQUEsQ0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLGdCQUFuQixDQUFBLENBQXFDLENBQUMsTUFBN0MsQ0FBb0QsQ0FBQyxJQUFyRCxDQUEwRCxDQUExRDt1QkFDQSxNQUFBLENBQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBbkIsQ0FBQSxDQUFzQyxDQUFBLENBQUEsQ0FBRSxDQUFDLE9BQXpDLENBQUEsQ0FBUCxDQUEwRCxDQUFDLElBQTNELENBQWdFLFNBQWhFO2NBRkEsQ0FIRjtZQURBLENBRkY7VUFEaUMsQ0FBbkM7UUFYeUIsQ0FBM0I7TUFqQjZCLENBQS9CO0lBL05xQixDQUF2QjtFQXhCdUIsQ0FBekI7QUFYQSIsInNvdXJjZXNDb250ZW50IjpbIlN5bmNTZXR0aW5ncyA9IHJlcXVpcmUgJy4uL2xpYi9zeW5jLXNldHRpbmdzJ1xuU3BlY0hlbHBlciA9IHJlcXVpcmUgJy4vc3BlYy1oZWxwZXJzJ1xucnVuID0gU3BlY0hlbHBlci5jYWxsQXN5bmNcbmZzID0gcmVxdWlyZSAnZnMnXG5wYXRoID0gcmVxdWlyZSAncGF0aCdcbm9zID0gcmVxdWlyZSAnb3MnXG4jIFVzZSB0aGUgY29tbWFuZCBgd2luZG93OnJ1bi1wYWNrYWdlLXNwZWNzYCAoY21kLWFsdC1jdHJsLXApIHRvIHJ1biBzcGVjcy5cbiNcbiMgVG8gcnVuIGEgc3BlY2lmaWMgYGl0YCBvciBgZGVzY3JpYmVgIGJsb2NrIGFkZCBhbiBgZmAgdG8gdGhlIGZyb250IChlLmcuIGBmaXRgXG4jIG9yIGBmZGVzY3JpYmVgKS4gUmVtb3ZlIHRoZSBgZmAgdG8gdW5mb2N1cyB0aGUgYmxvY2suXG5cbmRlc2NyaWJlIFwiU3luY1NldHRpbmdzXCIsIC0+XG5cbiAgZGVzY3JpYmUgXCJsb3ctbGV2ZWxcIiwgLT5cbiAgICBkZXNjcmliZSBcIjo6ZmlsZUNvbnRlbnRcIiwgLT5cbiAgICAgIHRtcFBhdGggPSBwYXRoLmpvaW4ob3MudG1wZGlyKCksICdhdG9tLXN5bmMtc2V0dGluZ3MudG1wJylcblxuICAgICAgaXQgXCJyZXR1cm5zIG51bGwgZm9yIG5vdCBleGlzdGluZyBmaWxlXCIsIC0+XG4gICAgICAgIGV4cGVjdChTeW5jU2V0dGluZ3MuZmlsZUNvbnRlbnQodG1wUGF0aCkpLnRvQmVOdWxsKClcblxuICAgICAgaXQgXCJyZXR1cm5zIG51bGwgZm9yIGVtcHR5IGZpbGVcIiwgLT5cbiAgICAgICAgZnMud3JpdGVGaWxlU3luYyB0bXBQYXRoLCBcIlwiXG4gICAgICAgIHRyeVxuICAgICAgICAgIGV4cGVjdChTeW5jU2V0dGluZ3MuZmlsZUNvbnRlbnQodG1wUGF0aCkpLnRvQmVOdWxsKClcbiAgICAgICAgZmluYWxseVxuICAgICAgICAgIGZzLnVubGlua1N5bmMgdG1wUGF0aFxuXG4gICAgICBpdCBcInJldHVybnMgY29udGVudCBvZiBleGlzdGluZyBmaWxlXCIsIC0+XG4gICAgICAgIHRleHQgPSBcImFsYWJhbGEgcG9ydG9jYWxhXCJcbiAgICAgICAgZnMud3JpdGVGaWxlU3luYyB0bXBQYXRoLCB0ZXh0XG4gICAgICAgIHRyeVxuICAgICAgICAgIGV4cGVjdChTeW5jU2V0dGluZ3MuZmlsZUNvbnRlbnQodG1wUGF0aCkpLnRvRXF1YWwgdGV4dFxuICAgICAgICBmaW5hbGx5XG4gICAgICAgICAgZnMudW5saW5rU3luYyB0bXBQYXRoXG5cbiAgZGVzY3JpYmUgXCJoaWdoLWxldmVsXCIsIC0+XG4gICAgVE9LRU5fQ09ORklHID0gJ3N5bmMtc2V0dGluZ3MucGVyc29uYWxBY2Nlc3NUb2tlbidcbiAgICBHSVNUX0lEX0NPTkZJRyA9ICdzeW5jLXNldHRpbmdzLmdpc3RJZCdcblxuICAgIHdpbmRvdy5yZXNldFRpbWVvdXRzKClcbiAgICBTeW5jU2V0dGluZ3MuYWN0aXZhdGUoKVxuICAgIHdpbmRvdy5hZHZhbmNlQ2xvY2soKVxuXG4gICAgYmVmb3JlRWFjaCAtPlxuICAgICAgQHRva2VuID0gcHJvY2Vzcy5lbnYuR0lUSFVCX1RPS0VOIG9yIGF0b20uY29uZmlnLmdldChUT0tFTl9DT05GSUcpXG4gICAgICBhdG9tLmNvbmZpZy5zZXQoVE9LRU5fQ09ORklHLCBAdG9rZW4pXG5cbiAgICAgIHJ1biAoY2IpIC0+XG4gICAgICAgIGdpc3RTZXR0aW5ncyA9XG4gICAgICAgICAgcHVibGljOiBmYWxzZVxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlRlc3QgZ2lzdCBieSBTeW5jIFNldHRpbmdzIGZvciBBdG9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hdG9tLWNvbW11bml0eS9zeW5jLXNldHRpbmdzXCJcbiAgICAgICAgICBmaWxlczogUkVBRE1FOiBjb250ZW50OiAnIyBHZW5lcmF0ZWQgYnkgU3luYyBTZXR0aW5ncyBmb3IgQXRvbSBodHRwczovL2dpdGh1Yi5jb20vYXRvbS1jb21tdW5pdHkvc3luYy1zZXR0aW5ncydcbiAgICAgICAgU3luY1NldHRpbmdzLmNyZWF0ZUNsaWVudCgpLmdpc3RzLmNyZWF0ZShnaXN0U2V0dGluZ3MsIGNiKVxuICAgICAgLCAoZXJyLCByZXMpID0+XG4gICAgICAgIGV4cGVjdChlcnIpLnRvQmVOdWxsKClcblxuICAgICAgICBAZ2lzdElkID0gcmVzLmlkXG4gICAgICAgIGNvbnNvbGUubG9nIFwiVXNpbmcgR2lzdCAje0BnaXN0SWR9XCJcbiAgICAgICAgYXRvbS5jb25maWcuc2V0KEdJU1RfSURfQ09ORklHLCBAZ2lzdElkKVxuXG4gICAgYWZ0ZXJFYWNoIC0+XG4gICAgICBydW4gKGNiKSA9PlxuICAgICAgICBTeW5jU2V0dGluZ3MuY3JlYXRlQ2xpZW50KCkuZ2lzdHMuZGVsZXRlIHtpZDogQGdpc3RJZH0sIGNiXG4gICAgICAsIChlcnIsIHJlcykgLT5cbiAgICAgICAgZXhwZWN0KGVycikudG9CZU51bGwoKVxuXG4gICAgZGVzY3JpYmUgXCI6OmJhY2t1cFwiLCAtPlxuICAgICAgaXQgXCJiYWNrIHVwIHRoZSBzZXR0aW5nc1wiLCAtPlxuICAgICAgICBhdG9tLmNvbmZpZy5zZXQoJ3N5bmMtc2V0dGluZ3Muc3luY1NldHRpbmdzJywgdHJ1ZSlcbiAgICAgICAgcnVuIChjYikgLT5cbiAgICAgICAgICBTeW5jU2V0dGluZ3MuYmFja3VwIGNiXG4gICAgICAgICwgLT5cbiAgICAgICAgICBydW4gKGNiKSA9PlxuICAgICAgICAgICAgU3luY1NldHRpbmdzLmNyZWF0ZUNsaWVudCgpLmdpc3RzLmdldCh7aWQ6IEBnaXN0SWR9LCBjYilcbiAgICAgICAgICAsIChlcnIsIHJlcykgLT5cbiAgICAgICAgICAgIGV4cGVjdChyZXMuZmlsZXNbJ3NldHRpbmdzLmpzb24nXSkudG9CZURlZmluZWQoKVxuXG4gICAgICBpdCBcImRvbid0IGJhY2sgdXAgdGhlIHNldHRpbmdzXCIsIC0+XG4gICAgICAgIGF0b20uY29uZmlnLnNldCgnc3luYy1zZXR0aW5ncy5zeW5jU2V0dGluZ3MnLCBmYWxzZSlcbiAgICAgICAgcnVuIChjYikgLT5cbiAgICAgICAgICBTeW5jU2V0dGluZ3MuYmFja3VwIGNiXG4gICAgICAgICwgLT5cbiAgICAgICAgICBydW4gKGNiKSA9PlxuICAgICAgICAgICAgU3luY1NldHRpbmdzLmNyZWF0ZUNsaWVudCgpLmdpc3RzLmdldCh7aWQ6IEBnaXN0SWR9LCBjYilcbiAgICAgICAgICAsIChlcnIsIHJlcykgLT5cbiAgICAgICAgICAgIGV4cGVjdChyZXMuZmlsZXNbJ3NldHRpbmdzLmpzb24nXSkubm90LnRvQmVEZWZpbmVkKClcblxuICAgICAgaXQgXCJiYWNrIHVwIHRoZSBpbnN0YWxsZWQgcGFja2FnZXMgbGlzdFwiLCAtPlxuICAgICAgICBhdG9tLmNvbmZpZy5zZXQoJ3N5bmMtc2V0dGluZ3Muc3luY1BhY2thZ2VzJywgdHJ1ZSlcbiAgICAgICAgcnVuIChjYikgLT5cbiAgICAgICAgICBTeW5jU2V0dGluZ3MuYmFja3VwIGNiXG4gICAgICAgICwgLT5cbiAgICAgICAgICBydW4gKGNiKSA9PlxuICAgICAgICAgICAgU3luY1NldHRpbmdzLmNyZWF0ZUNsaWVudCgpLmdpc3RzLmdldCh7aWQ6IEBnaXN0SWR9LCBjYilcbiAgICAgICAgICAsIChlcnIsIHJlcykgLT5cbiAgICAgICAgICAgIGV4cGVjdChyZXMuZmlsZXNbJ3BhY2thZ2VzLmpzb24nXSkudG9CZURlZmluZWQoKVxuXG4gICAgICBpdCBcImRvbid0IGJhY2sgdXAgdGhlIGluc3RhbGxlZCBwYWNrYWdlcyBsaXN0XCIsIC0+XG4gICAgICAgIGF0b20uY29uZmlnLnNldCgnc3luYy1zZXR0aW5ncy5zeW5jUGFja2FnZXMnLCBmYWxzZSlcbiAgICAgICAgcnVuIChjYikgLT5cbiAgICAgICAgICBTeW5jU2V0dGluZ3MuYmFja3VwIGNiXG4gICAgICAgICwgLT5cbiAgICAgICAgICBydW4gKGNiKSA9PlxuICAgICAgICAgICAgU3luY1NldHRpbmdzLmNyZWF0ZUNsaWVudCgpLmdpc3RzLmdldCh7aWQ6IEBnaXN0SWR9LCBjYilcbiAgICAgICAgICAsIChlcnIsIHJlcykgLT5cbiAgICAgICAgICAgIGV4cGVjdChyZXMuZmlsZXNbJ3BhY2thZ2VzLmpzb24nXSkubm90LnRvQmVEZWZpbmVkKClcblxuICAgICAgaXQgXCJiYWNrIHVwIHRoZSB1c2VyIGtleW1hcHNcIiwgLT5cbiAgICAgICAgYXRvbS5jb25maWcuc2V0KCdzeW5jLXNldHRpbmdzLnN5bmNLZXltYXAnLCB0cnVlKVxuICAgICAgICBydW4gKGNiKSAtPlxuICAgICAgICAgIFN5bmNTZXR0aW5ncy5iYWNrdXAgY2JcbiAgICAgICAgLCAtPlxuICAgICAgICAgIHJ1biAoY2IpID0+XG4gICAgICAgICAgICBTeW5jU2V0dGluZ3MuY3JlYXRlQ2xpZW50KCkuZ2lzdHMuZ2V0KHtpZDogQGdpc3RJZH0sIGNiKVxuICAgICAgICAgICwgKGVyciwgcmVzKSAtPlxuICAgICAgICAgICAgZXhwZWN0KHJlcy5maWxlc1sna2V5bWFwLmNzb24nXSkudG9CZURlZmluZWQoKVxuXG4gICAgICBpdCBcImRvbid0IGJhY2sgdXAgdGhlIHVzZXIga2V5bWFwc1wiLCAtPlxuICAgICAgICBhdG9tLmNvbmZpZy5zZXQoJ3N5bmMtc2V0dGluZ3Muc3luY0tleW1hcCcsIGZhbHNlKVxuICAgICAgICBydW4gKGNiKSAtPlxuICAgICAgICAgIFN5bmNTZXR0aW5ncy5iYWNrdXAgY2JcbiAgICAgICAgLCAtPlxuICAgICAgICAgIHJ1biAoY2IpID0+XG4gICAgICAgICAgICBTeW5jU2V0dGluZ3MuY3JlYXRlQ2xpZW50KCkuZ2lzdHMuZ2V0KHtpZDogQGdpc3RJZH0sIGNiKVxuICAgICAgICAgICwgKGVyciwgcmVzKSAtPlxuICAgICAgICAgICAgZXhwZWN0KHJlcy5maWxlc1sna2V5bWFwLmNzb24nXSkubm90LnRvQmVEZWZpbmVkKClcblxuICAgICAgaXQgXCJiYWNrIHVwIHRoZSB1c2VyIHN0eWxlc1wiLCAtPlxuICAgICAgICBhdG9tLmNvbmZpZy5zZXQoJ3N5bmMtc2V0dGluZ3Muc3luY1N0eWxlcycsIHRydWUpXG4gICAgICAgIHJ1biAoY2IpIC0+XG4gICAgICAgICAgU3luY1NldHRpbmdzLmJhY2t1cCBjYlxuICAgICAgICAsIC0+XG4gICAgICAgICAgcnVuIChjYikgPT5cbiAgICAgICAgICAgIFN5bmNTZXR0aW5ncy5jcmVhdGVDbGllbnQoKS5naXN0cy5nZXQoe2lkOiBAZ2lzdElkfSwgY2IpXG4gICAgICAgICAgLCAoZXJyLCByZXMpIC0+XG4gICAgICAgICAgICBleHBlY3QocmVzLmZpbGVzWydzdHlsZXMubGVzcyddKS50b0JlRGVmaW5lZCgpXG5cbiAgICAgIGl0IFwiZG9uJ3QgYmFjayB1cCB0aGUgdXNlciBzdHlsZXNcIiwgLT5cbiAgICAgICAgYXRvbS5jb25maWcuc2V0KCdzeW5jLXNldHRpbmdzLnN5bmNTdHlsZXMnLCBmYWxzZSlcbiAgICAgICAgcnVuIChjYikgLT5cbiAgICAgICAgICBTeW5jU2V0dGluZ3MuYmFja3VwIGNiXG4gICAgICAgICwgLT5cbiAgICAgICAgICBydW4gKGNiKSA9PlxuICAgICAgICAgICAgU3luY1NldHRpbmdzLmNyZWF0ZUNsaWVudCgpLmdpc3RzLmdldCh7aWQ6IEBnaXN0SWR9LCBjYilcbiAgICAgICAgICAsIChlcnIsIHJlcykgLT5cbiAgICAgICAgICAgIGV4cGVjdChyZXMuZmlsZXNbJ3N0eWxlcy5sZXNzJ10pLm5vdC50b0JlRGVmaW5lZCgpXG5cbiAgICAgIGl0IFwiYmFjayB1cCB0aGUgdXNlciBpbml0LmNvZmZlZSBmaWxlXCIsIC0+XG4gICAgICAgIGF0b20uY29uZmlnLnNldCgnc3luYy1zZXR0aW5ncy5zeW5jSW5pdCcsIHRydWUpXG4gICAgICAgIHJ1biAoY2IpIC0+XG4gICAgICAgICAgU3luY1NldHRpbmdzLmJhY2t1cCBjYlxuICAgICAgICAsIC0+XG4gICAgICAgICAgcnVuIChjYikgPT5cbiAgICAgICAgICAgIFN5bmNTZXR0aW5ncy5jcmVhdGVDbGllbnQoKS5naXN0cy5nZXQoe2lkOiBAZ2lzdElkfSwgY2IpXG4gICAgICAgICAgLCAoZXJyLCByZXMpIC0+XG4gICAgICAgICAgICBleHBlY3QocmVzLmZpbGVzWydpbml0LmNvZmZlZSddKS50b0JlRGVmaW5lZCgpXG5cbiAgICAgIGl0IFwiZG9uJ3QgYmFjayB1cCB0aGUgdXNlciBpbml0LmNvZmZlZSBmaWxlXCIsIC0+XG4gICAgICAgIGF0b20uY29uZmlnLnNldCgnc3luYy1zZXR0aW5ncy5zeW5jSW5pdCcsIGZhbHNlKVxuICAgICAgICBydW4gKGNiKSAtPlxuICAgICAgICAgIFN5bmNTZXR0aW5ncy5iYWNrdXAgY2JcbiAgICAgICAgLCAtPlxuICAgICAgICAgIHJ1biAoY2IpID0+XG4gICAgICAgICAgICBTeW5jU2V0dGluZ3MuY3JlYXRlQ2xpZW50KCkuZ2lzdHMuZ2V0KHtpZDogQGdpc3RJZH0sIGNiKVxuICAgICAgICAgICwgKGVyciwgcmVzKSAtPlxuICAgICAgICAgICAgZXhwZWN0KHJlcy5maWxlc1snaW5pdC5jb2ZmZWUnXSkubm90LnRvQmVEZWZpbmVkKClcblxuICAgICAgaXQgXCJiYWNrIHVwIHRoZSB1c2VyIHNuaXBwZXRzXCIsIC0+XG4gICAgICAgIGF0b20uY29uZmlnLnNldCgnc3luYy1zZXR0aW5ncy5zeW5jU25pcHBldHMnLCB0cnVlKVxuICAgICAgICBydW4gKGNiKSAtPlxuICAgICAgICAgIFN5bmNTZXR0aW5ncy5iYWNrdXAgY2JcbiAgICAgICAgLCAtPlxuICAgICAgICAgIHJ1biAoY2IpID0+XG4gICAgICAgICAgICBTeW5jU2V0dGluZ3MuY3JlYXRlQ2xpZW50KCkuZ2lzdHMuZ2V0KHtpZDogQGdpc3RJZH0sIGNiKVxuICAgICAgICAgICwgKGVyciwgcmVzKSAtPlxuICAgICAgICAgICAgZXhwZWN0KHJlcy5maWxlc1snc25pcHBldHMuY3NvbiddKS50b0JlRGVmaW5lZCgpXG5cbiAgICAgIGl0IFwiZG9uJ3QgYmFjayB1cCB0aGUgdXNlciBzbmlwcGV0c1wiLCAtPlxuICAgICAgICBhdG9tLmNvbmZpZy5zZXQoJ3N5bmMtc2V0dGluZ3Muc3luY1NuaXBwZXRzJywgZmFsc2UpXG4gICAgICAgIHJ1biAoY2IpIC0+XG4gICAgICAgICAgU3luY1NldHRpbmdzLmJhY2t1cCBjYlxuICAgICAgICAsIC0+XG4gICAgICAgICAgcnVuIChjYikgPT5cbiAgICAgICAgICAgIFN5bmNTZXR0aW5ncy5jcmVhdGVDbGllbnQoKS5naXN0cy5nZXQoe2lkOiBAZ2lzdElkfSwgY2IpXG4gICAgICAgICAgLCAoZXJyLCByZXMpIC0+XG4gICAgICAgICAgICBleHBlY3QocmVzLmZpbGVzWydzbmlwcGV0cy5jc29uJ10pLm5vdC50b0JlRGVmaW5lZCgpXG5cbiAgICAgIGl0IFwiYmFjayB1cCB0aGUgZmlsZXMgZGVmaW5lZCBpbiBjb25maWcuZXh0cmFGaWxlc1wiLCAtPlxuICAgICAgICBhdG9tLmNvbmZpZy5zZXQgJ3N5bmMtc2V0dGluZ3MuZXh0cmFGaWxlcycsIFsndGVzdC50bXAnLCAndGVzdDIudG1wJ11cbiAgICAgICAgcnVuIChjYikgLT5cbiAgICAgICAgICBTeW5jU2V0dGluZ3MuYmFja3VwIGNiXG4gICAgICAgICwgLT5cbiAgICAgICAgICBydW4gKGNiKSA9PlxuICAgICAgICAgICAgU3luY1NldHRpbmdzLmNyZWF0ZUNsaWVudCgpLmdpc3RzLmdldCh7aWQ6IEBnaXN0SWR9LCBjYilcbiAgICAgICAgICAsIChlcnIsIHJlcykgLT5cbiAgICAgICAgICAgIGZvciBmaWxlIGluIGF0b20uY29uZmlnLmdldCAnc3luYy1zZXR0aW5ncy5leHRyYUZpbGVzJ1xuICAgICAgICAgICAgICBleHBlY3QocmVzLmZpbGVzW2ZpbGVdKS50b0JlRGVmaW5lZCgpXG5cbiAgICAgIGl0IFwiZG9uJ3QgYmFjayB1cCBleHRyYSBmaWxlcyBkZWZpbmVkIGluIGNvbmZpZy5leHRyYUZpbGVzXCIsIC0+XG4gICAgICAgIGF0b20uY29uZmlnLnNldCAnc3luYy1zZXR0aW5ncy5leHRyYUZpbGVzJywgdW5kZWZpbmVkXG4gICAgICAgIHJ1biAoY2IpIC0+XG4gICAgICAgICAgU3luY1NldHRpbmdzLmJhY2t1cCBjYlxuICAgICAgICAsIC0+XG4gICAgICAgICAgcnVuIChjYikgPT5cbiAgICAgICAgICAgIFN5bmNTZXR0aW5ncy5jcmVhdGVDbGllbnQoKS5naXN0cy5nZXQoe2lkOiBAZ2lzdElkfSwgY2IpXG4gICAgICAgICAgLCAoZXJyLCByZXMpIC0+XG4gICAgICAgICAgICBleHBlY3QoT2JqZWN0LmtleXMocmVzLmZpbGVzKS5sZW5ndGgpLnRvQmUoMSlcblxuICAgIGRlc2NyaWJlIFwiOjpyZXN0b3JlXCIsIC0+XG4gICAgICBpdCBcInVwZGF0ZXMgc2V0dGluZ3NcIiwgLT5cbiAgICAgICAgYXRvbS5jb25maWcuc2V0KCdzeW5jLXNldHRpbmdzLnN5bmNTZXR0aW5ncycsIHRydWUpXG4gICAgICAgIGF0b20uY29uZmlnLnNldCBcInNvbWUtZHVtbXlcIiwgdHJ1ZVxuICAgICAgICBydW4gKGNiKSAtPlxuICAgICAgICAgIFN5bmNTZXR0aW5ncy5iYWNrdXAgY2JcbiAgICAgICAgLCAtPlxuICAgICAgICAgIGF0b20uY29uZmlnLnNldCBcInNvbWUtZHVtbXlcIiwgZmFsc2VcbiAgICAgICAgICBydW4gKGNiKSAtPlxuICAgICAgICAgICAgU3luY1NldHRpbmdzLnJlc3RvcmUgY2JcbiAgICAgICAgICAsIC0+XG4gICAgICAgICAgICBleHBlY3QoYXRvbS5jb25maWcuZ2V0IFwic29tZS1kdW1teVwiKS50b0JlVHJ1dGh5KClcblxuICAgICAgaXQgXCJkb2Vzbid0IHVwZGF0ZXMgc2V0dGluZ3NcIiwgLT5cbiAgICAgICAgYXRvbS5jb25maWcuc2V0KCdzeW5jLXNldHRpbmdzLnN5bmNTZXR0aW5ncycsIGZhbHNlKVxuICAgICAgICBhdG9tLmNvbmZpZy5zZXQgXCJzb21lLWR1bW15XCIsIHRydWVcbiAgICAgICAgcnVuIChjYikgLT5cbiAgICAgICAgICBTeW5jU2V0dGluZ3MuYmFja3VwIGNiXG4gICAgICAgICwgLT5cbiAgICAgICAgICBydW4gKGNiKSAtPlxuICAgICAgICAgICAgU3luY1NldHRpbmdzLnJlc3RvcmUgY2JcbiAgICAgICAgICAsIC0+XG4gICAgICAgICAgICBleHBlY3QoYXRvbS5jb25maWcuZ2V0IFwic29tZS1kdW1teVwiKS50b0JlVHJ1dGh5KClcblxuICAgICAgaXQgXCJvdmVycmlkZXMga2V5bWFwLmNzb25cIiwgLT5cbiAgICAgICAgYXRvbS5jb25maWcuc2V0KCdzeW5jLXNldHRpbmdzLnN5bmNLZXltYXAnLCB0cnVlKVxuICAgICAgICBvcmlnaW5hbCA9IFN5bmNTZXR0aW5ncy5maWxlQ29udGVudChhdG9tLmtleW1hcHMuZ2V0VXNlcktleW1hcFBhdGgoKSkgPyBcIiMga2V5bWFwIGZpbGUgKG5vdCBmb3VuZClcIlxuICAgICAgICBydW4gKGNiKSAtPlxuICAgICAgICAgIFN5bmNTZXR0aW5ncy5iYWNrdXAgY2JcbiAgICAgICAgLCAtPlxuICAgICAgICAgIGZzLndyaXRlRmlsZVN5bmMgYXRvbS5rZXltYXBzLmdldFVzZXJLZXltYXBQYXRoKCksIFwiI3tvcmlnaW5hbH1cXG4jIG1vZGlmaWVkIGJ5IHN5bmMgc2V0dGluZyBzcGVjXCJcbiAgICAgICAgICBydW4gKGNiKSAtPlxuICAgICAgICAgICAgU3luY1NldHRpbmdzLnJlc3RvcmUgY2JcbiAgICAgICAgICAsIC0+XG4gICAgICAgICAgICBleHBlY3QoU3luY1NldHRpbmdzLmZpbGVDb250ZW50KGF0b20ua2V5bWFwcy5nZXRVc2VyS2V5bWFwUGF0aCgpKSkudG9FcXVhbCBvcmlnaW5hbFxuICAgICAgICAgICAgZnMud3JpdGVGaWxlU3luYyBhdG9tLmtleW1hcHMuZ2V0VXNlcktleW1hcFBhdGgoKSwgb3JpZ2luYWxcblxuICAgICAgaXQgXCJyZXN0b3JlcyBhbGwgb3RoZXIgZmlsZXMgaW4gdGhlIGdpc3QgYXMgd2VsbFwiLCAtPlxuICAgICAgICBhdG9tLmNvbmZpZy5zZXQgJ3N5bmMtc2V0dGluZ3MuZXh0cmFGaWxlcycsIFsndGVzdC50bXAnLCAndGVzdDIudG1wJ11cbiAgICAgICAgcnVuIChjYikgLT5cbiAgICAgICAgICBTeW5jU2V0dGluZ3MuYmFja3VwIGNiXG4gICAgICAgICwgLT5cbiAgICAgICAgICBydW4gKGNiKSAtPlxuICAgICAgICAgICAgU3luY1NldHRpbmdzLnJlc3RvcmUgY2JcbiAgICAgICAgICAsIC0+XG4gICAgICAgICAgICBmb3IgZmlsZSBpbiBhdG9tLmNvbmZpZy5nZXQgJ3N5bmMtc2V0dGluZ3MuZXh0cmFGaWxlcydcbiAgICAgICAgICAgICAgZXhwZWN0KGZzLmV4aXN0c1N5bmMoXCIje2F0b20uY29uZmlnLmNvbmZpZ0RpclBhdGh9LyN7ZmlsZX1cIikpLnRvQmUodHJ1ZSlcbiAgICAgICAgICAgICAgZXhwZWN0KFN5bmNTZXR0aW5ncy5maWxlQ29udGVudChcIiN7YXRvbS5jb25maWcuY29uZmlnRGlyUGF0aH0vI3tmaWxlfVwiKSkudG9CZShcIiMgI3tmaWxlfSAobm90IGZvdW5kKSBcIilcbiAgICAgICAgICAgICAgZnMudW5saW5rIFwiI3thdG9tLmNvbmZpZy5jb25maWdEaXJQYXRofS8je2ZpbGV9XCJcblxuICAgIGRlc2NyaWJlIFwiOjpjaGVjayBmb3IgdXBkYXRlXCIsIC0+XG5cbiAgICAgIGJlZm9yZUVhY2ggLT5cbiAgICAgICAgYXRvbS5jb25maWcudW5zZXQgJ3N5bmMtc2V0dGluZ3MuX2xhc3RCYWNrdXBIYXNoJ1xuXG4gICAgICBpdCBcInVwZGF0ZXMgbGFzdCBoYXNoIG9uIGJhY2t1cFwiLCAtPlxuICAgICAgICBydW4gKGNiKSAtPlxuICAgICAgICAgIFN5bmNTZXR0aW5ncy5iYWNrdXAgY2JcbiAgICAgICAgLCAtPlxuICAgICAgICAgIGV4cGVjdChhdG9tLmNvbmZpZy5nZXQgXCJzeW5jLXNldHRpbmdzLl9sYXN0QmFja3VwSGFzaFwiKS50b0JlRGVmaW5lZCgpXG5cbiAgICAgIGl0IFwidXBkYXRlcyBsYXN0IGhhc2ggb24gcmVzdG9yZVwiLCAtPlxuICAgICAgICBydW4gKGNiKSAtPlxuICAgICAgICAgIFN5bmNTZXR0aW5ncy5yZXN0b3JlIGNiXG4gICAgICAgICwgLT5cbiAgICAgICAgICBleHBlY3QoYXRvbS5jb25maWcuZ2V0IFwic3luYy1zZXR0aW5ncy5fbGFzdEJhY2t1cEhhc2hcIikudG9CZURlZmluZWQoKVxuXG4gICAgICBkZXNjcmliZSBcIjo6bm90aWZpY2F0aW9uXCIsIC0+XG4gICAgICAgIGJlZm9yZUVhY2ggLT5cbiAgICAgICAgICBhdG9tLm5vdGlmaWNhdGlvbnMuY2xlYXIoKVxuXG4gICAgICAgIGl0IFwiZGlzcGxheXMgb24gbmV3ZXIgYmFja3VwXCIsIC0+XG4gICAgICAgICAgcnVuIChjYikgLT5cbiAgICAgICAgICAgIFN5bmNTZXR0aW5ncy5jaGVja0ZvclVwZGF0ZSBjYlxuICAgICAgICAgICwgLT5cbiAgICAgICAgICAgIGV4cGVjdChhdG9tLm5vdGlmaWNhdGlvbnMuZ2V0Tm90aWZpY2F0aW9ucygpLmxlbmd0aCkudG9CZSgxKVxuICAgICAgICAgICAgZXhwZWN0KGF0b20ubm90aWZpY2F0aW9ucy5nZXROb3RpZmljYXRpb25zKClbMF0uZ2V0VHlwZSgpKS50b0JlKCd3YXJuaW5nJylcblxuICAgICAgICBpdCBcImlnbm9yZXMgb24gdXAtdG8tZGF0ZSBiYWNrdXBcIiwgLT5cbiAgICAgICAgICBydW4gKGNiKSAtPlxuICAgICAgICAgICAgU3luY1NldHRpbmdzLmJhY2t1cCBjYlxuICAgICAgICAgICwgLT5cbiAgICAgICAgICAgIHJ1biAoY2IpIC0+XG4gICAgICAgICAgICAgIGF0b20ubm90aWZpY2F0aW9ucy5jbGVhcigpXG4gICAgICAgICAgICAgIFN5bmNTZXR0aW5ncy5jaGVja0ZvclVwZGF0ZSBjYlxuICAgICAgICAgICAgLCAtPlxuICAgICAgICAgICAgICBleHBlY3QoYXRvbS5ub3RpZmljYXRpb25zLmdldE5vdGlmaWNhdGlvbnMoKS5sZW5ndGgpLnRvQmUoMSlcbiAgICAgICAgICAgICAgZXhwZWN0KGF0b20ubm90aWZpY2F0aW9ucy5nZXROb3RpZmljYXRpb25zKClbMF0uZ2V0VHlwZSgpKS50b0JlKCdzdWNjZXNzJylcbiJdfQ==
